package com.johndev.smartcalculatorimport android.content.Intentimport android.content.SharedPreferencesimport android.graphics.Colorimport android.graphics.PorterDuffimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.text.Editableimport android.view.View.GONEimport android.view.View.VISIBLEimport android.widget.Toastimport androidx.appcompat.app.AppCompatDelegateimport androidx.fragment.app.Fragmentimport androidx.preference.PreferenceManagerimport com.google.android.gms.ads.AdRequestimport com.google.android.gms.ads.LoadAdErrorimport com.google.android.gms.ads.interstitial.InterstitialAdimport com.google.android.gms.ads.interstitial.InterstitialAdLoadCallbackimport com.google.android.material.dialog.MaterialAlertDialogBuilderimport com.johndev.smartcalculator.databinding.ActivityMainBindingimport com.johndev.smartcalculator.usecases.common.Constantes.ADD_UNITSimport com.johndev.smartcalculator.usecases.principalViews.CalculatorActivityimport com.johndev.smartcalculator.usecases.home.MainMenuFragmentimport com.johndev.smartcalculator.usecases.home.MainDeveloperFragmentimport com.johndev.smartcalculator.usecases.home.MainFormulasFragmentimport com.johndev.smartcalculator.usecases.home.MainUpdatesFragmentclass MainActivity : AppCompatActivity() {    private lateinit var binding: ActivityMainBinding    // Variables for adds    private var interstitial: InterstitialAd? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = ActivityMainBinding.inflate(layoutInflater)        setContentView(binding.root)        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)        configureTheme()        //calculatorMode()        initAdds()        binding.bottomNavigation.setOnNavigationItemSelectedListener { menuItem ->            when (menuItem.itemId) {                R.id.action_functions -> {                    addCounterForAdd()                    binding.efab.visibility = VISIBLE                    val fragment = MainMenuFragment()                    openFragment(fragment)                    true                }                R.id.action_formulas -> {                    addCounterForAdd()                    binding.efab.visibility = VISIBLE                    val fragment = MainFormulasFragment()                    openFragment(fragment)                    true                }                R.id.action_developer -> {                    addCounterForAdd()                    binding.efab.visibility = VISIBLE                    val fragment = MainDeveloperFragment()                    openFragment(fragment)                    true                }                R.id.action_history_updates -> {                    addCounterForAdd()                    binding.efab.visibility = GONE                    val fragment = MainUpdatesFragment()                    openFragment(fragment)                    true                }                R.id.action_settings -> {                    addCounterForAdd()                    startActivity(Intent(this, SettingsActivity::class.java))                    true                }                else -> false            }        }        binding.bottomNavigation.selectedItemId = R.id.action_functions        binding.efab.setOnClickListener {            val intent = Intent(this, CalculatorActivity::class.java)            startActivity(intent)        } }    /*private fun calculatorMode() {        if (sharedPreferences.getBoolean(getString(R.string.preferences_key_enable_calculator_mode), true)) {            if (!returnMain) {                startActivity(Intent(this, CalculatorActivity::class.java))            }        }    }*/    private fun openFragment(fragment: Fragment) {        val transaction = supportFragmentManager.beginTransaction()        transaction.apply {            replace(R.id.main_container, fragment)            addToBackStack(null)            commit()        }    }    override fun onBackPressed() {        MaterialAlertDialogBuilder(this)            .setTitle(R.string.bottom_sheet_title_exit)            .setPositiveButton(R.string.btn_exit) { dialogInterface, i -> finish() }            .setNegativeButton(getString(R.string.btn_cancelar), null)            .show()    }    override fun onResume() {        super.onResume()        setupTheme()        configureTheme()    }    private fun setupTheme() {        when (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {            false -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)            true -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)        }    }    private fun configureTheme() {        val theme = sharedPreferences.getString(getString(R.string.key_preference_application_color),            getString(R.string.preference_key_color_default))        when(theme) {            getString(R.string.preference_key_color_default) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_red) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryRedColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryRedColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryRedBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_yellow) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryYellowColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryYellowColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryYellowBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_blue) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryBlueColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryBlueColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryBlueBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_green) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryGreenColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryGreenColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryGreenBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_purple) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryPurpleBackground), PorterDuff.Mode.SRC)                    }                }            }            getString(R.string.preference_key_color_orange) -> {                with(binding) {                    efab.background.setColorFilter(Color.parseColor(ColorsExtra.primaryOrangeColor), PorterDuff.Mode.SRC)                    bottomNavigation.background.setColorFilter(Color.parseColor(ColorsExtra.primaryOrangeColor), PorterDuff.Mode.SRC)                    if (sharedPreferences.getBoolean(getString(R.string.key_preference_enable_light_mode), true)) {                        container.background.setColorFilter(Color.parseColor(ColorsExtra.primaryOrangeBackground), PorterDuff.Mode.SRC)                    }                }            }        }    }    private fun addCounterForAdd(){        counterAdds += 1        checkCounter()    }    private fun initAdds(){        var adRequest: AdRequest = AdRequest.Builder().build()        InterstitialAd.load(this, ADD_UNITS, adRequest,            object: InterstitialAdLoadCallback(){                override fun onAdLoaded(p0: InterstitialAd) {                    interstitial = p0                }                override fun onAdFailedToLoad(p0: LoadAdError) {                    interstitial = null                }            })    }    private fun checkCounter() {        if (counterAdds == 5){            showAdd()            counterAdds = 0        }    }    private fun showAdd(){        interstitial?.show(this)    }    companion object {        lateinit var sharedPreferences: SharedPreferences        private const val RC_EDIT = 21        var counterAdds = 0        var interstitial: InterstitialAd? = null        fun String.editable(): Editable = Editable.Factory.getInstance().newEditable(this)    }}